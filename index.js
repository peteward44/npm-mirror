'use strict';

var path = require( 'path' );
var fs = require( 'fs-extra' );
var url = require( 'url' );
var yargs = require( 'yargs' );




function getOutPath( outdir, urlstr ) {
	var parsed = url.parse( urlstr );
	console.log( "parsed", parsed );
	return outdir + "name.tgz";
}


function buildNewUrl( newUrl, urlstr ) {
	return newUrl + "name.tgz";
}


function getFilesToDownload( swjson, newUrl, outdir, output, callback ) {
	if ( !swjson.dependencies ) {
		return;
	}
	for ( var name in swjson.dependencies ) {
		if ( swjson.dependencies.hasOwnProperty( name ) ) {
			var dep = swjson.dependencies[ name ];
			if ( dep.resolved ) {
				var outpath = getOutPath( outdir, dep.resolved );
				var newUrl = buildNewUrl( newUrl, dep.resolved );
				output.push( { url: dep.resolved, out: outpath } );
				dep.resolved = newUrl;
			}
			getFilesToDownload( dep, newUrl, outdir, output, callback );
		}
	}
}


function start() {
	var options = yargs
		.option( 'shrinkwrap', {
			describe: 'Input shrinkwrap file generated by npm',
			default: 'npm-shrinkwrap.json'
		} )
		.option( 'outdir', {
			describe: 'Output directory to put web server contents',
			default: 'www'
		} )
		.option( 'outshrinkwrap', {
			describe: 'Outputs modified shrinkwrap file to another file (defaults to modifying input file)'
		} )
		.option( 'url', {
			describe: 'URL to write into the new shrinkwrap json that will hold the mirrored npm dependencies',
			demand: true
		} )
		.usage('Usage: $0 [options]')
		.example('$0 --url http://localhost', 'Reads in ./npm-shrinkwrap.json and outputs to www directory')
		.example('$0 --url http://localhost --shrinkwrap /home/user/project/npm-shrinkwrap.json --outdir /var/www', 'Reads specified shrinkwrap json file and outputs to specified www directory')
		.help( 'help' )
		.argv;
		
	options.shrinkwrap = path.resolve( options.shrinkwrap );
	if ( !fs.existsSync( options.shrinkwrap ) ) {
		console.error( "Shrinkwrap file '" + options.shrinkwrap + "' not found!" );
		return;
	}
	if ( !options.outshrinkwrap ) {
		options.outshrinkwrap = options.shrinkwrap;
	}
	options.outshrinkwrap = path.resolve( options.outshrinkwrap );
	
	var swjson = JSON.parse( fs.readFileSync( options.shrinkwrap ) );

	options.outdir = path.resolve( options.outdir );
	fs.ensureDirSync( options.outdir );
	getFilesToDownload( swjson, options.url, options.outdir, [], function( err ) {
		fs.writeFileSync( options.outshrinkwrap, JSON.stringify( swjson, null, 2 ) );
	} );
}


start();

